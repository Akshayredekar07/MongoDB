
Map-Reduce in MongoDB:
``````````````````````
Map-Reduce is a data processing paradigm for condensing large volumes of data into useful aggregated results.

It is a very popular topic in most of the languages/technologies like Java, Python, Hadoop etc

An aggregation pipeline provides better performance and usability than map-Reduce operation. Hence it is not replcacment for aggregation pipeline. It is just alternative to aggregation pipeline with limited functionality

consider the dataset:
_id,name,round,points,city  
1,TeamA,1,5,Hyderabad  
2,TeamB,1,3,Bangalore  
3,TeamC,1,4,Chennai  
4,TeamD,1,5,Hyderabad  
5,TeamA,2,5,Hyderabad  
6,TeamB,2,10,Bangalore  
7,TeamC,2,3,Chennai  
8,TeamD,2,7,Hyderabad  
9,TeamA,3,10,Hyderabad  
10,TeamB,3,4,Bangalore  
11,TeamC,3,1,Chennai  
12,TeamD,3,5,Hyderabad  
13,TeamA,4,8,Hyderabad  
14,TeamB,4,7,Bangalore  
15,TeamC,4,7,Chennai  
16,TeamD,4,9,Hyderabad


TeamA ---> [5,1,10,0] ---> Map 
      --->16 --------->Reduce

Q. find Teamwise total number of points?
By using aggregation framwork:
`````````````````````````````
db.quiz.aggregate([
    {$group: {_id:"$name", totalPoints:{$sum: "$points"}}},
    {$out: "aggregation_pipeline_collection"}
])      

```
quizdb> db.quiz.aggregate([    {$group: {_id:"$name", totalPoints:{$sum: "$points"}}},    {$out: "aggregation_pipeline_collection"}])

quizdb> show collections
aggregation_pipeline_collection
citywisetotal
quiz
quizdb> db.aggregation_pipeline_collection.find()
[
  { _id: 'TeamD', totalPoints: 26 },
  { _id: 'TeamC', totalPoints: 15 },
  { _id: 'TeamB', totalPoints: 24 },
  { _id: 'TeamA', totalPoints: 28 }
]
```

By using Map-Reduce:
````````````````````

We can implement Map-Reduce paradigm using 2 ways:
1. Map function
2. Reduce function

1. Map function
````````````````
This function will perform mapping of the fields in the input documents ie. It will map key field with value field.

eg: 

var mapFunction = function(){
    emit(this.name, this.points);
};

TeamA -->[5, 1, 10, 0]
TThe keyword this can refer to the current input document.
This map function maps name field(key) with points field(values).
emits is javascripts based function to generate key-values.

Reduce function:
````````````````

This function will takes key values generated by map function as input and perform Reduce operation to generate aggregate results.

var reduceFunction = (key, values){
    return Array.sum(values);
};


The reduce function process all values associated with a particular key and generate aggregated results. In this case sum results


3. perform map-reduce for all documens:
``````````````````````````````````````` 

For this we have to use mapReduce() method. I is something like aggregate() or find() method.

db.quiz.mapReduce(
    mapFunction, 
    reduceFunction, 
    { out: "map_reduce_collection" }
);


By using out option, we can write aggregated result to the collection.


var mapFunction = function(){
    emit(this.name, this.points);
};

var reduceFunction = (key, values) => {
  return Array.sum(values);
};


db.quiz.mapReduce(
    mapFunction, 
    reduceFunction, 
    { out: "map_reduce_collection" }
);



function mapFunction() {
    emit(this.name, this.points); 
}

var reduceFunction = (key, value) => {
    return Array.sum(value);
};

db.quiz.mapReduce(
    mapFunction,
    reduceFunction,
    { out: "map_reduce_collection" }
);


How to display aggregated result to the console itself:
```````````````````````````````````````````````````````
db.quiz.mapReduce(
    mapFunction,
    reduceFunction,
    { out: {inline:1} }
);


We can use various option to map-reduce:
````````````````````````````````````````
The options query, sort, limit will be processed before mapFunction execution

db.quiz.mapReduce(
    mapFunction,
    reduceFunction,
    { 
        query:{},
        sort: {},
        limit: number,
        out:collection | inline
    }
);

db.quiz.mapReduce(
    mapFunction,
    reduceFunction,
    { 
        query:{name: "TeamA"},
        out: {inline:1}
    }
);


db.quiz.mapReduce(
    mapFunction,
    reduceFunction,
    { 
        query:{name: "TeamA"},
        sort:{points:-1},
        limit:2,
        out: {inline:1}
    }
);

execution --> query-->sort-->limit-->map-->reduce-->result


