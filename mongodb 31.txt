
MongoDB Indexing:
`````````````````

find()
update({},{})
delete({})

We have to find matched documents.

Example:
book without index 
book with index  

goto chapter11    

shopping 100s of employees

If i need to run only one query from very large data, then do we need to 
create index as it will also takes time


Book my show 
select all movies in given theatre and in a particular city 

IRCTC  
select all trains from source to destination  100000 trains Hyderabad


db.employees.find({ename: "Sunny"}).pretty()

db.employees.find({ename: "Sunny"}).explain("executionStats")

This is without indexing 
```
storedb> db.employees.find({ename: "Sunny"}).explain("executionStats")
{
  explainVersion: '2',
  queryPlanner: {
    namespace: 'storedb.employees',
    indexFilterSet: false,
    parsedQuery: { ename: { '$eq': 'Sunny' } },
    queryHash: 'E70F86CE',
    planCacheKey: '9BFF0667',
    maxIndexedOrSolutionsReached: false,
    maxIndexedAndSolutionsReached: false,
    maxScansToExplodeReached: false,
    winningPlan: {
      queryPlan: {
        stage: 'COLLSCAN',
        planNodeId: 1,
        filter: { ename: { '$eq': 'Sunny' } },
        direction: 'forward'
      },
      slotBasedPlan: {
        slots: '$$RESULT=s5 env: { s2 = Nothing (SEARCH_META), s3 = 1725976715254 (NOW), s1 = TimeZoneDatabase(Africa/Accra...America/New_York) (timeZoneDB), s7 = "Sunny" }',
        stages: '[1] filter {traverseF(s4, lambda(l1.0) { ((l1.0 == s7) ?: false) }, false)} \n' +
          '[1] scan s5 s6 none none none none lowPriority [s4 = ename] @"ebbba24f-5f70-4cf7-a47c-ed339eddb5dc" true false '
      }
    },
    rejectedPlans: []
  },
  executionStats: {
    executionSuccess: true,
    nReturned: 1,
    executionTimeMillis: 6,
    totalKeysExamined: 0,
    totalDocsExamined: 7,
    executionStages: {
      stage: 'filter',
      planNodeId: 1,
      nReturned: 1,
      executionTimeMillisEstimate: 0,
      opens: 1,
      closes: 1,
      saveState: 0,
      restoreState: 0,
      isEOF: 1,
      numTested: 7,
      filter: 'traverseF(s4, lambda(l1.0) { ((l1.0 == s7) ?: false) }, false) ',
      inputStage: {
        stage: 'scan',
        planNodeId: 1,
        nReturned: 7,
        executionTimeMillisEstimate: 0,
        opens: 1,
        closes: 1,
        saveState: 0,
        restoreState: 0,
        isEOF: 1,
        numReads: 7,
        recordSlot: 5,
        recordIdSlot: 6,
        fields: [ 'ename' ],
        outputSlots: [ Long("4") ]
      }
    }
  },
  command: { find: 'employees', filter: { ename: 'Sunny' }, '$db': 'storedb' },
  serverInfo: {
    host: 'LAPTOP-5MJVV5PN',
    port: 27017,
    version: '7.0.3',
    gitVersion: 'b96efb7e0cf6134d5938de8a94c37cec3f22cff4'
  },
  serverParameters: {
    internalQueryFacetBufferSizeBytes: 104857600,
    internalQueryFacetMaxOutputDocSizeBytes: 104857600,
    internalLookupStageIntermediateDocumentMaxSizeBytes: 104857600,
    internalDocumentSourceGroupMaxMemoryBytes: 104857600,
    internalQueryMaxBlockingSortMemoryUsageBytes: 104857600,
    internalQueryProhibitBlockingMergeOnMongoS: 0,
    internalQueryMaxAddToSetBytes: 104857600,
    internalDocumentSourceSetWindowFieldsMaxMemoryBytes: 104857600,
    internalQueryFrameworkControl: 'trySbeEngine'
  },
  ok: 1
}
```


Define index and then find(): 
----------------------------- 
db.employees.getIndexes()  
  
Returns available indexes 

storedb> db.employees.getIndexes()
[ { v: 2, key: { _id: 1 }, name: '_id_' } ]
 
> db.employees.createIndex({ename: 1}) 

storedb> db.employees.createIndex({ename: 1})
ename_1
storedb> db.employees.getIndexes()
[
  { v: 2, key: { _id: 1 }, name: '_id_' },
  { v: 2, key: { ename: 1 }, name: 'ename_1' }
]

> db.employees.find({ename: "Sunny"})
> db.employees.find({ename: "Sunny"}).explain("executionStats")

```
storedb> db.employees.find({ename: "Sunny"}).explain("executionStats")
{
  explainVersion: '2',
  queryPlanner: {
    namespace: 'storedb.employees',
    indexFilterSet: false,
    parsedQuery: { ename: { '$eq': 'Sunny' } },
    queryHash: 'E70F86CE',
    planCacheKey: '48320AF3',
    maxIndexedOrSolutionsReached: false,
    maxIndexedAndSolutionsReached: false,
    maxScansToExplodeReached: false,
    winningPlan: {
      queryPlan: {
        stage: 'FETCH',
        planNodeId: 2,
        inputStage: {
          stage: 'IXSCAN',
          planNodeId: 1,
          keyPattern: { ename: 1 },
          indexName: 'ename_1',
          isMultiKey: false,
          multiKeyPaths: { ename: [] },
          isUnique: false,
          isSparse: false,
          isPartial: false,
          indexVersion: 2,
          direction: 'forward',
          indexBounds: { ename: [ '["Sunny", "Sunny"]' ] }
        }
      },
      slotBasedPlan: {
        slots: '$$RESULT=s11 env: { s10 = {"ename" : 1}, s5 = KS(3C53756E6E79000104), s3 = 1725977025368 (NOW), s6 = KS(3C53756E6E7900FE04), s1 = TimeZoneDatabase(Africa/Accra...America/New_York) (timeZoneDB), s2 = Nothing (SEARCH_META) }',
        stages: '[2] nlj inner [] [s4, s7, s8, s9, s10] \n' +
          '    left \n' +
          '        [1] cfilter {(exists(s5) && exists(s6))} \n' +
          '        [1] ixseek s5 s6 s9 s4 s7 s8 [] @"ebbba24f-5f70-4cf7-a47c-ed339eddb5dc" @"ename_1" true \n' +
          '    right \n' +
          '        [2] limit 1 \n' +
          '        [2] seek s4 s11 s12 s7 s8 s9 s10 [] @"ebbba24f-5f70-4cf7-a47c-ed339eddb5dc" true false \n'
      }
    },
    rejectedPlans: []
  },
  executionStats: {
    executionSuccess: true,
    nReturned: 1,
    executionTimeMillis: 2,
    totalKeysExamined: 1,
    totalDocsExamined: 1,
    executionStages: {
      stage: 'nlj',
      planNodeId: 2,
      nReturned: 1,
      executionTimeMillisEstimate: 0,
      opens: 1,
      closes: 1,
      saveState: 0,
      restoreState: 0,
      isEOF: 1,
      totalDocsExamined: 1,
      totalKeysExamined: 1,
      collectionScans: 0,
      collectionSeeks: 1,
      indexScans: 0,
      indexSeeks: 1,
      indexesUsed: [ 'ename_1' ],
      innerOpens: 1,
      innerCloses: 1,
      outerProjects: [],
      outerCorrelated: [ Long("4"), Long("7"), Long("8"), Long("9"), Long("10") ],
      outerStage: {
        stage: 'cfilter',
        planNodeId: 1,
        nReturned: 1,
        executionTimeMillisEstimate: 0,
        opens: 1,
        closes: 1,
        saveState: 0,
        restoreState: 0,
        isEOF: 1,
        numTested: 1,
        filter: '(exists(s5) && exists(s6)) ',
        inputStage: {
          stage: 'ixseek',
          planNodeId: 1,
          nReturned: 1,
          executionTimeMillisEstimate: 0,
          opens: 1,
          closes: 1,
          saveState: 0,
          restoreState: 0,
          isEOF: 1,
          indexName: 'ename_1',
          keysExamined: 1,
          seeks: 1,
          numReads: 2,
          indexKeySlot: 9,
          recordIdSlot: 4,
          snapshotIdSlot: 7,
          indexIdentSlot: 8,
          outputSlots: [],
          indexKeysToInclude: '00000000000000000000000000000000',
          seekKeyLow: 's5 ',
          seekKeyHigh: 's6 '
        }
        .
        .
        .
```


We can define index on multiple fields: 

db.employees.createIndex({eno:1,ename:-1})  


How to drop index? 
------------------ 
db.employees.dropIndex({ename: 1})

> db.employees.getIndexes()

```
storedb> db.employees.createIndex({eno:1,ename:-1})
eno_1_ename_-1
storedb> db.employees.dropIndex({ename: 1})
{ nIndexesWas: 3, ok: 1 }
storedb>db.employees.getIndexes()
[
  { v: 2, key: { _id: 1 }, name: '_id_' },
  { v: 2, key: { eno: 1, ename: -1 }, name: 'eno_1_ename_-1' }
]
```


Indexing is DBMS related concept and almost every database provides 
support. 
Indexes supports efficient execution of queries in MongoDB. 
Indexing concept is very helpful for find,update and delete queries. 
The main objective of indexing is to improve performance.  

Without indexes, server will scan all documents present in the 
collection to find matched documents. This is called Collection Scan(COLLSCAN).  

Whenever we are defining index, MongoDB Server will store values of 
indexed field in B-Tree Data structure in specified sorting order. 

To find matched documents, we are not required to scan all documents,server can identify matched documents directly based Index Scan(IXSCAN). 

 
As the number of documents to be scan, is reduces and hence 
performance will be improved. 

How to check available indexes? 
------------------------------- 
db.collection.getIndexes()  

How to create Index: 
-------------------- 
db.collection.createIndex({field: 1|-1})  

1 means Ascending order    
-1 means Descending order  

How to drop index: 
------------------ 
db.collection.dropIndex({field:1|-1})


Is it possible to define index on multiple fields: --------------------------------------------------- 
db.collection.createIndex({field1: 1, field2: -1})  

The order of fields is important.  

Q. Is it recommended to define index for all fields? 
No, performance will be degraded. 
Server has to store every indexed field value separately.  

Q. Is it recommended to define index for small collections? 
No. Instead of improving performance , it will be reduced. 
This is like keeping multiple cash counters in paan shop.  

Q. How to see execution stats of query? 
explain() method with executionStats arguement 


executionStats â€“ this mode includes all the information provided by 
the queryPlanner, plus the statistics. Statistics include details such as the number of documents examined and returned, the execution time 
in milliseconds, and so on. 

db.collection.find({query}).explain("executionStats")

Q. Is any default index for our collection?
 For every collection default index is avaialble, and it is based on _id 
field.  

db.employees.getIndexes()