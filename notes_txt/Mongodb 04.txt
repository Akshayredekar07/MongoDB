
Nested Documents:
~~~~~~~~~~~~~~~~~

Sometimes we can take document inside another document, such type of document is called as Nested documents also calledas embedded documents.

>> db.Employees.insertOne({empno:76, ename:"Ankit", esal:2345, eaddr:"Pune", hobbies:{h1:"Swimming", h2:"Reading"}})


    specifications: {
        capacity: "12 cups",
        color: "Stainless Steel",
          height: "14 inches",
          width: "9 inches",
          depth: "8 inches"
    }

Consider the example:
~~~~~~~~~~~~~~~~~~~~

[
    {
        "Title": "MongoDB",
        "isbn": "2345",
        "reviews": 5,
        "versions": {
            "version1": 2015,
            "version2": 2017
        }
    },
    {
        "Title": "NoSQL",
        "isbn": "2346",
        "reviews": 41,
        "versions": {
            "version1": 2001,
            "version2": 2004
        }
    }
]


mongoimport --db Bookstore --collection books --file book books.json --jsonArray

Excecute it from the command prompt not from MongoDB shell:

Download the mongodb tools:
```````````````````````````````````
mongoimport "C:\Users\Akshay\Documents\DATABASES\MongoDB Durgasoft\books.json" -d Bookstore -c books --jsonArray --drop
``````````````````````````````````


PS C:\Users\Akshay\Documents\DATABASES\MongoDB Durgasoft> mongoimport "C:\Users\Akshay\Documents\DATABASES\MongoDB Durgasoft\books.json" -d Bookstore -c books --jsonArray --drop
2024-08-12T16:59:08.381+0530    connected to: mongodb://localhost/
2024-08-12T16:59:08.383+0530    dropping: Bookstore.books
2024-08-12T16:59:08.441+0530    2 document(s) imported successfully. 0 document(s) failed to import.


:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

Bookstore ::: DATABASES NAME
BOOKS     ::: COLLECTION NAME
books.json  ::: json data 


[
    {
        "Title": "MongoDB",
        "isbn": "2345",
        "reviews": 5,
        "versions": {
            "version1": 2015,
            "version2": 2017
        }
    },
    {
        "Title": "NoSQL",
        "isbn": "2346",
        "reviews": 41,
        "versions": {
            "version1": 2001,
            "version2": 2004
        }
    },
    {
        "Title": "Advanced python with Durga",
        "isbn": "1111",
        "reviews": 7000,
        "versions": { "version1": 2019, "version2": 2021 }
      },
      {
        "Title": "Java with Durga",
        "isbn": "9876",
        "reviews": 675,
        "versions": { "version1": 2013, "version2": 2016 }
      }
]



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mongoimport "C:\Users\Akshay\Documents\DATABASES\MongoDB Durgasoft\books.json" -d Bookstore -c books --jsonArray --drop


~~~~~~~~~~~~~~~~~~~~~~~~~~

inside nested document, we can take another document also.

mongodb support upto 100 level nesting

Queries:

db.collection.find()
db.collection.insertOne()
db.collection.insertMany()
db.collection.update()
db.collection.updateOne({}, {})


{
  "product_name": "Laptop",
  "brand": "Dell",
  "price": 999.99,
  "specifications": {
    "display": {
      "size": "15.6 inches",
      "resolution": "1920x1080",
      "type": "IPS"
    },
    "processor": {
      "manufacturer": "Intel",
      "model": "Core i7-12700H",
      "cores": 14
    },
    "storage": {
      "type": "SSD",
      "capacity": "512GB"
    }
  },
  "reviews": [
    {
      "customer": "John Doe",
      "rating": 4.5,
      "comment": "Great laptop!"
    },
    {
      "customer": "Jane Smith",
      "rating": 5,
      "comment": "Excellent performance."
    }
  ]
}



Arrays in document:
~~~~~~~~~~~~~~~~~~~

Any collection of itens is called an array,
The item can be string or number or object also.

{
  "category": "Software Engineering",
  "books": [
    {
      "title": "Clean Code: A Handbook of Agile Software Craftsmanship",
      "author": "Robert C. Martin",
      "publishedYear": 2008,
      "ISBN": "9780132350884",
      "genres": ["Software Engineering", "Programming"],
      "language": "English",
      "pages": 431,
      "reviews": [
        {
          "reviewer": "Alice Johnson",
          "rating": 5,
          "comment": "A must-read for all developers!"
        },
        {
          "reviewer": "Bob Lee",
          "rating": 4,
          "comment": "Great insights, but some parts are repetitive."
        }
      ]
    },
    {
      "title": "Design Patterns: Elements of Reusable Object-Oriented Software",
      "author": [
        "Erich Gamma",
        "Richard Helm",
        "Ralph Johnson",
        "John Vlissides"
      ],
      "publishedYear": 1994,
      "ISBN": "9780201634983",
      "genres": ["Software Engineering", "Design Patterns"],
      "language": "English",
      "pages": 395,
      "reviews": [
        {
          "reviewer": "Charlie Brown",
          "rating": 5,
          "comment": "A foundational book for understanding design patterns."
        }
      ]
    },
    {
      "title": "The Pragmatic Programmer: Your Journey to Mastery",
      "author": [
        "Andrew Hunt",
        "David Thomas"
      ],
      "publishedYear": 1999,
      "ISBN": "9780201616222",
      "genres": ["Software Engineering", "Programming"],
      "language": "English",
      "pages": 320,
      "reviews": [
        {
          "reviewer": "David White",
          "rating": 4,
          "comment": "Full of practical advice for programmers."
        },
        {
          "reviewer": "Emma Green",
          "rating": 4,
          "comment": "Good book, but some advice feels dated."
        }
      ]
    }
  ]
}


Baisc idea about CRUD operations.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C ---> Create Operation | Insert Operation


Object Id:
``````````
>> For every document MongoDB server will associate a unique id, which is nothing but ObjectId will be assigned to _id filed.


_id: ObjectId("66ba10b8599317bb6852e07b"),


ObjectId is not json type and it is of BSON type.

ObjectId is 12 bytes:

1. The frist 4 bytes represents the timestamp when this document was insetred.
2. The next 3 bytes represents machine identifer(host name)
3. The next 2 bytes represents process id.
4. The last 3 bytes represents some random increment value.



Why this lengthy ObjectId:
``````````````````````````
The only reason is uniqueness.

:::::::::Decoding the object ID:::::::::::::::::

To generate timestamp from ObjectId:

db.books.find()[0]  --> List out only first document of the books collection
db.books.find()[0]._id  --> Object id of first document
db.books.find()[0]._id.getTimestamp()  --> Get timestamp of the object id


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Check the errors:

Bookstore> use Studentdb
switched to db Studentdb
Studentdb> show collections
Students
Studentdb> dd.Students.find()
ReferenceError: dd is not defined
Studentdb> db.Students.find()
[
  {
    _id: ObjectId("66b1ea3158b89e920b32fc87"),
    name: 'Rohit',
    city: 'beed'
  }
]
Studentdb> db.Students.find()[0]

Studentdb> db.Students.find()._id()
TypeError: db.Students.find()._id is not a function
Studentdb> db.insertOne({"A":200, "B":400});
TypeError: db.insertOne is not a function
Studentdb> db.Students.insertOne({"A":200, "B":400});
{
  acknowledged: true,
  insertedId: ObjectId("66bc3fb2eb46ecd72f341399")
}
Studentdb> db.Students.find()[0]

Studentdb> use Bookstore
switched to db Bookstore
Bookstore> show collections
books
Bookstore> db.Students.insertOne({"A":200, "B":400});
{
  acknowledged: true,
  insertedId: ObjectId("66bc4003eb46ecd72f34139a")
}
Bookstore> db.Students.find({"B":400});
[ { _id: ObjectId("66bc4003eb46ecd72f34139a"), A: 200, B: 400 } ]
Bookstore> db.Students.find({"B":400})._id

Bookstore> db.Students.find({"B":400})[0]._id
TypeError: Cannot read properties of undefined (reading '_id')
Bookstore> db.Students.find({"B":400})[0]._id.getTimestamp();
TypeError: Cannot read properties of undefined (reading '_id')
Bookstore>

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


By using _id field, we can provide our own value as ObjectId.

>> But this is not recommended , MongoDB server will generatedefalut ObjectId, iff we are not providing any _id filed value.

>> If we provide our own values, it may not provide timestamp, machine identifer, process id etc.


>> Hence it is not recommned to provide our own object id 

Is it possible to have same _id for documents?
Duplicate ObjectId possible or not?

>> No Chance at all, even we provide value explicilty also.
db.employees.insertOne({_id:789, name:"Rahul"})
db.employees.insertOne({_id:789, name:"Viraj"})


~~~~~~~~~~~
Bookstore> db.employees.insertOne({_id:789, name:"Rahul"})
{ acknowledged: true, insertedId: 789 }
Bookstore> db.employees.insertOne({_id:789, name:"Viraj"})
MongoServerError: E11000 duplicate key error collection: Bookstore.employees index: _id_ dup key: { _id: 789 }
Bookstore>
~~~~~~~~~~

Immutable:

ObjectId are Immutable: >> Onces we creates/assigns ObjectId we cannot change its values.

db.employees.find().pretty()


db.employees.updateOne({_id:789},{$set: {_id:9999}})

````
Bookstore> db.employees.updateOne({_id:789},{$set: {_id:9999}})
MongoServerError: Performing an update on the path '_id' would modify the immutable field '_id'
Bookstore>
````

Error Message:  

Performing an update on the path '_id' would modify the immutable field '_id'

`````
Hence uniqueness for collections not for database:

Questions and Answers:

Q: We can use the same ObjectId for other collections, right?
A: Yes, possible. Uniqueness is per collection, not per database.

Q: _id: 100 and _id: "100" possible in the same collection?
A: Yes, because data types are different.



A) We cannot store documents in collection without ObjectId.
Answer: False
B) _id field will be added automatically by MongoDB, if we are not providing that field explicitly.
Answer: True
C) ObjectId is not JSON type and it is of BSON Type.
Answer: True
D) Default ObjectId generated by MongoDB is of 12 bytes.
Answer: True
E) ObjectIds are unique.
Answer: True
F) ObjectIds are mutable.
Answer: False
G) We cannot modify the value of ObjectId after creation.
Answer: True
H) Default ObjectId consists of timestamp,machine identifier, processid etc
Answer: True
I) The advantage of using default ObjectId is we can get several details like timestamp etc
Answer: True
J) If we provide our own ObjectId value, it may not generate timestamp,machine identifier,process id etc.
Answer: True
K) All of these.
Answer: False


````````````````
A) We cannot store documents in collection without ObjectId.
Answer: False
Justification: This statement is false because MongoDB does not require an ObjectId for every document. While the _id field is mandatory for each document in a collection, it doesn't have to be an ObjectId. You can use any unique value as the _id, including strings, numbers, or even custom objects. If you don't provide an _id field when inserting a document, MongoDB will automatically generate an ObjectId for it, but you're not restricted to only using ObjectIds.
F) ObjectIds are Immutable.
Answer: False
Justification: This statement is false because while the content of an ObjectId itself cannot be changed once created, the ObjectId as a whole can be replaced in a document. The term "immutable" implies that it can never be changed in any way, which is not accurate in this context. You can update a document to replace its entire ObjectId with a new one. What you can't do is modify parts of an existing ObjectId - it's all or nothing. So while the internal structure of an ObjectId is fixed once created, the ObjectId field in a document is not truly immutable as it can be entirely replaced.



``````````

Same ObjectId for Different Collections:

Answer: Yes, possible. ObjectId uniqueness is per collection, not per database.
Different Data Types for _id in Same Collection:

Answer: Yes, possible. _id values like 100 (integer) and "100" (string) can coexist because they are different data types.
True Statements:

ObjectIds are unique within a collection.
Different data types for _id are treated as distinct.
The _id field is immutable and cannot be modified after creation.


