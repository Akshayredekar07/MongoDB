

CRUD Operations 

C--->Create Operation | Insert Operation 
R--->Retrieve Operation | Read Operation 
U--->Update Operation  
 
 U--->Update Operation: 
 ---------------------- 
 
students collection 

Based on our requirement, we can perform update operations to 
reflect latest information.  

eg-1: update student document with changed mobile number 
eg-2: Increment all employee salaries by 1000 if salary is less than 10000  

We can perform updations like  

1. Overwrite existing value of a particular field with our new value
2. Add a new field for selected documents 
3. Remove an existing field 
4. Rename an existing field etc

How to perform updations: 
------------------------- 
We can perform required updations by using update methods and 
update operators.  


update methods: 
--------------- 
There are 3 update methods are avaialble. 

1. updateOne()
2. updateMany()
3. update()


1. updateOne():
Syntax: db.collection.updateOne(filter, update, options)

It finds the first document that matches filter criteria and perform required updation. 
It will perform updation for a single document.   

2. updateMany(): 
--------------- 

db.collection.updateMany(filter,update,options)  

To update all documents that match the specified filter criteria.  

3. update(): 
----------- 
db.collection.update(filter,update,options)  

We can use this method to update either a single document or multiple documents. Bydefault this method updates a single document only.  If we include multi:true to update all documents that match query criteria.  

db.collection.update(filter,update)--->To update a single document 
db.collection.update(filter,update,{multi:true})--->To update all matched documents  


Case Study: 
----------- 

db.employees.insert({_id:1, eno:100, ename:"Sunny", esal:1000, eaddr:"Mumbai"})  
db.employees.insert({_id:2, eno:200, ename:"Bunny", esal:2000, eaddr:"Hyderabad"})  
db.employees.insert({_id:3, eno:300, ename:"Chinny", esal:3000, eaddr:"Mumbai"})  
db.employees.insert({_id:4, eno:400, ename:"Vinny", esal:4000, eaddr:"Delhi"})  
db.employees.insert({_id:5, eno:500, ename:"Pinny", esal:5000, eaddr:"Chennai"})  
db.employees.insert({_id:6, eno:600, ename:"Tinny", esal:6000, eaddr:"Mumbai"})  
db.employees.insert({_id:7, eno:700, ename:"Zinny", esal:7000, eaddr:"Delhi"})

db.employees.find()

>> to perform updation we have to use update operator like $set, $unset, $inc, $mul, $rename, $min, $max, $currentDate etc

Q1. Update the sarary of sunny to 9999?
> db.employees.update({ename:"Sunny"},{$set:{esal:9999}});
> db.employees.find({ename:"Sunny"});

```
storedb> db.employees.update({ename:"Sunny"},{$set:{esal:9999}});
DeprecationWarning: Collection.update() is deprecated. Use updateOne, updateMany, or bulkWrite.
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
storedb> db.employees.find({ename:"Sunny"});
[ { _id: 1, eno: 100, ename: 'Sunny', esal: 9999, eaddr: 'Mumbai' } ]
```

Q2. Update all Mumbai based employee salary by 7777?
> db.employees.update({eaddr:"Mumbai"},{$set:{esal:7777}});
--- Only for single document updation

> db.employees.update({eaddr:"Mumbai"},{$set:{esal:7777}},{multi:true});
--- For multiple document updation

> db.employees.find({eaddr:"Mumbai"});

Note: updateOne() will always consider only first matched document If updation is not avaialble then only it perform updation


Q3. update all delhi based employee salary as 5555?

> db.employees.update({eaddr:"Delhi"},{$set:{esal:5555}});
--- Only for single document updation

> db.employees.update({eaddr:"Delhi"},{$set:{esal:5555}},{multi:true});
--- For multiple document updation

> db.employees.find({eaddr:"Delhi"});

db.employees.update({eaddr:"Delhi"},{$set:{esal:4444}},{multi:true});
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 2,
  modifiedCount: 2,
  upsertedCount: 0
}



Update Operators: 
----------------- 

We can use update operators to perform updation. 

1. $set
2. $unset 
3. $inc 
4. $mul 
5. $rename 
6. $min 
7. $max 
8. $currentDate 


1. $set: 

We can use $set operator to update existing value of a field or to add new value to a field. 


Case-1:
If the specified field is not available in the document then $set operator will add the value of specified field. 

> db.employees.update({ename:"Sunny"},{$set:{esal:9999}});
> db.employees.find();

> db.employees.update({eaddr:"Mumbai"},{$set:{esal:7777}});
> db.employees.find();

db.employees.update({eaddr:"Mumbai"},{$set:{eaddr:"Mumbai1"}});

Case-2: updating multiple fields at a time ------------------------------------------ 
We can perform updations for multiple fields at a time.  
{$set: {field1: value1, field2:value2, ...}}  

> db.employees.update({ename:"Sunny"},{$set: {esal: 1111, age: 45, 
origin: "Punjab"}}) 

Q3. Add a new filed named with friend value Guest where esal value is >= 4000?

db.employees.update({esal:{$gte:4000}},{$set:{friend:"Guest"}},{multi:true});


case-3: Nested document updation: --------------------------------------------------

Q. Change callname of Sara to Virushka?
storedb> db.books.find().limit(1);
[
  {
    _id: ObjectId("66c49da6b033c154dd47d271"),
    title: 'Web Development Essentials',
    isbn: 8910,
    downloadable: true,
    no_of_reviews: 40,
    tags: [ 'web development', 'html', 'css', 'javascript' ],
    languages: [ 'english', 'german', 'mandarin' ],
    author: {
      name: 'Sara Lee',
      callname: 'Sara',
      profile: { exp: 7, courses: 4, books: 2 }
    }
  }
]

db.books.update({"author.name": "Sara Lee"},{$set: 
{"author.callname": "Virushka"}})
