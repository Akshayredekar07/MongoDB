
Logical Query Operators:
~~~~~~~~~~~~~~~~~~~~~~~

$or, $nor, $and, $not


$or operator:
>> $or performs logical OR operation on an array of tow or more expression(conditions) and select documents that satisfy atleast one of the expression(condition)

Syntax: {$or: [{expression1}, {expression2}, {expression3},...]}

Q1. Select all documents where either no_of_reviews > 3 or tags contains programming element?
no_of_reviews >3 or tags containes programming

c1: {no_of_reviews: {$gt:3}}
c3: {tags: "programming"}

db.books.find({$or: [{no_of_reviews: {$gt:3}}, {tags: "programming"}]})


Q2. Select all document where either no_of_reviews is less than 3 or downloadable is true author profile contains al least 2 books

c1: {no_of_reviews: {$lt:3}}
c2: {downloadable: true}
c1: {"author.profile.books": {$gte: 2}}

>> db.books.find({$or : [ {no_of_reviews: {$lt:3}}, {downloadable: true}, {"author.profile.books": {$gte: 2}}]})


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

$nor operator:

It is inverse of $or operator
$or -->Atleast one condition satisfied
$nor -->Neighter condition satisfied i.e all conditions fails

$nor performance a logical NOR operation on an array of one or more expression(condition) and selects the document that fail all query expressions

e.g:
c1: {no_of_reviews:{$gt: 3}}
c1: {downloadable: true}

>> db.books.find({$nor: [ {no_of_reviews:{$gt: 3}}, {downloadable: true}]})

It will select the all document where
1. The no_of_reviews is less than or equal to 3(i.e not greater than 3)
2. downloadable is false
3. document oes not contains no_of_reviews and downloadable fields


Note: $or + $nor = total no of documents

```
db.books.find({$nor: [ {no_of_reviews:{$gt: 3}}, {downloadable: true}]}).count()

//3 
db.books.find({$or: [ {no_of_reviews:{$gt: 3}}, {downloadable: true}]}).count()
//23

db.books.find().count()
````

`````````````````````````````````````````````````````````````
$and operator:
>> $and performs logical AND operation on an array of one or more expression(conditions) and select documents that satisfy all expression(condition) in the array i.e. all condition must be satisfied.


Syntax: {$or: [{expression1}, {expression2}, {expression3},...]}


Q. Select all document where the no_of_reviews is greater than or equal to 25 and downloadable true

>> db.dooks.find({$and: [{no_of_reviews: {$gte: 25}}, {downloadable: true}]})


``````````````````````
show collections


Student.json
~~~~~~~~~~~~
[
  {"name": "Anya Patel", "marks": 85},
  {"name": "Ben Lee", "marks": 92},
  {"name": "Chen Li", "marks": 78},
  {"name": "David Johnson", "marks": 95},
  {"name": "Emily Kim", "marks": 88},
  {"name": "Frank Rodriguez", "marks": 75},
  {"name": "Grace Tanaka", "marks": 90},
  {"name": "Hassan Ali", "marks": 82},
  {"name": "Ivan Ivanov", "marks": 97},
  {"name": "Jacob Cohen", "marks": 80},
  {"name": "Kate MÃ¼ller", "marks": 93},
  {"name": "Leo Wang", "marks": 87},
  {"name": "Maria Rodriguez", "marks": 76},
  {"name": "Nikhil Gupta", "marks": 91},
  {"name": "Olivia Chen", "marks": 84},
  {"name": "Paul Smith", "marks": 96},
  {"name": "Quinn O'Brien", "marks": 89},
  {"name": "Riley Kim", "marks": 77},
  {"name": "Sarah Patel", "marks": 94},
  {"name": "Thomas Lee", "marks": 83}
]


mongoimport --db storedb --collection student --file Student.json --jsonArray


Q. Select all documents where marks are less than 85 and greater than 45?
c1: {marks:$lt: 85}
c1: {marks:$gt: 45}
>>db.student.find({$and: [{marks:{$lt: 85}}, {marks:{$gt: 45}}]})

Q2.Select all documents where marks are less than 80 and greater than or equal to 76?

db.student.find({$and: [{marks:{$lt: 80}}, {marks:{$gte: 76}}]})


ShortCut for AND operation:
~~~~~~~~~~~~~~~~~~~~~~~~~~~
MongoDB provide an implicit AND operation when specifiying a comma seperated list of expression

Normal way: {$and: {expression1}, {expression2},...}
Shortcut:  {expression1, expression2,...}
e.g
>>  db.student.find({$and: [{no_of_reviews: {$gte: 3}}, {downloadable: true}]})

>>  db.student.find({no_of_reviews: {$gte: 3}, downloadable: true})

limitation of this shortcut:
> If the conditions are same fied then this shortcut won't work.


Q. list all the students whose marks are>=50 and <=90

>> db.student.find({marks:{$gte:50}, marks:{$lte: 90}})

Reason:
It javascript object duplicate keys are not allowed. if we are trying to add duplicate keys then old values will be replcaed with new value.

{marks: {$gte: 50}, marks: {$lte: 90}} 
It will become
{marks: {$lte: 90}}

Solution: we should use $and operator
db.student.find({$and: [{no_of_reviews: {$gte: 3}}, {downloadable: true}]})
